This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.gitignore
eslint.config.js
index.html
package.json
README.md
src/App.jsx
src/components/control/DroneControl.jsx
src/components/DroneStateDisplay.jsx
src/components/JSMpegVideoPlayer.jsx
src/components/VideoContainer.jsx
src/hooks/useDroneStateEventSource.js
src/index.css
src/jsmpeg-player.d.ts
src/main.jsx
src/store/slices/droneSlice.js
src/store/store.js
vite.config.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local
.env

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]
</file>

<file path="package.json">
{
  "name": "tello-frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@cycjimmy/jsmpeg-player": "^6.1.2",
    "@reduxjs/toolkit": "^2.7.0",
    "@tailwindcss/vite": "^4.1.4",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-redux": "^9.2.0",
    "tailwindcss": "^4.1.4"
  },
  "devDependencies": {
    "@eslint/js": "^9.22.0",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.22.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^16.0.0",
    "vite": "^6.3.1"
  }
}
</file>

<file path="README.md">
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.
</file>

<file path="src/App.jsx">
/**
 * Tello Drone Control Interface
 * This component handles the video streaming and control interface for the Tello drone.
 */

import JSMpegVideoPlayer from '@/components/JSMpegVideoPlayer'
import DroneControl from '@/components/control/DroneControl'
import DroneStateDisplay from '@/components/DroneStateDisplay'

function App() {
  return (
    <div className="relative h-screen">
      {/* JSMpegVideoPlayer - renders the video stream */}
      <JSMpegVideoPlayer />
      
      {/* Drone controls overlay */}
      <DroneControl />

      {/* Drone state display */}
      <DroneStateDisplay />
    </div>
  );
}

export default App;
</file>

<file path="src/components/control/DroneControl.jsx">
import { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { 
  setError, 
  setDroneConnection, 
  setStreamEnabled, 
  setRecordingStatus, 
  setRecordingFiles,
  incrementRetryAttempts,
  resetRetryAttempts
} from '@/store/slices/droneSlice';

// Get the API base URL from environment variables
const API_BASE_URL = import.meta.env.VITE_API_BASE_URL;

const DroneControl = () => {
  const dispatch = useDispatch();
  const { 
    droneConnected,
    streamEnabled,
    isRecording,
    recordingFiles,
    error,
    retryAttempts 
  } = useSelector(state => state.drone);

  // ==== ACTIVE KEYS ====
  {/* its temporary state to track which keys are currently being held down and does not need persistence */}  
  const [activeKeys, setActiveKeys] = useState(new Set());

  // Constants
  const MAX_SDK_RETRY_ATTEMPTS = 5;

  // ==== LIFE CYCLE MANAGEMENT ====
  const enterSDKMode = async () => {
    if (retryAttempts >= MAX_SDK_RETRY_ATTEMPTS) {
      dispatch(setError('Failed to connect to drone after maximum retry attempts'));
      return false;
    }

    try {

      const url = `${API_BASE_URL}/drone/command`;
        console.log(`Sending command to: ${url}`); // Log for debugging

      const response = await fetch(url);
      const data = await response.json();
      const success = data.status === 'connected';
      
      if (success) {
        dispatch(setDroneConnection(true));
        dispatch(setError(null));
        dispatch(resetRetryAttempts());
        return true;
      }
      
      // If not successful, throw an error to be handled by catch block
      throw new Error(`Connection failed: ${data.response}`);
      
    } catch (error) {
      console.error(error);
      dispatch(setError(error.message));
      dispatch(incrementRetryAttempts());
      return false;
    }
  };

  // Basic command sender
  const sendCommand = async (command) => {
    if (!droneConnected) {
      dispatch(setError('Drone not connected'));
      return;
    }

    try {

      const url = `${API_BASE_URL}/drone/${command}`;
        console.log(`Sending command to: ${url}`); // Log for debugging

      const response = await fetch(url);
      if (!response.ok) {
        throw new Error(`Command failed: ${response}`);
      }
      const data = await response.json();
      console.log('Command response:', data.response);
    } catch (error) {
      console.error(error);
      dispatch(setError(error.message));
    }
  };

  // ==== VIDEO CONTROLS ====
  const toggleVideoStream = async () => {
    const command = streamEnabled ? 'streamoff' : 'streamon';
    try {

      // Construct the full URL
      const url = `${API_BASE_URL}/drone/${command}`;
      console.log(`Sending command to: ${url}`); // Log for debugging

      const response = await fetch(url);
      if (!response.ok) throw new Error(`Failed to ${command}, ${response}`);
      dispatch(setStreamEnabled(!streamEnabled));
    } catch (error) {
      console.error(error);
      dispatch(setError(error.message));
    }
  };

  const capturePhoto = async () => {
    if (!streamEnabled) {
      dispatch(setError('Video stream not available'));
      return;
    }

    try {

      // Construct the full URL
      const url = `${API_BASE_URL}/capture-photo`;
      console.log(`Sending POST to: ${url}`); // Log for debugging

      const response = await fetch(url, { method: 'POST' });

      if (!response.ok) {
        throw new Error(`Failed to capture photo`);
      }

      const data = await response.json();
      console.log('Photo captured:', data.fileName);
    } catch (error) {
      console.error(error);
      dispatch(setError(error.message));
    }
  };

  const toggleRecording = async () => {
    try {
      const endpoint = isRecording ? '/stop-recording' : '/start-recording';
      
      // Construct the full URL
      const url = `${API_BASE_URL}${endpoint}`;
      console.log(`Sending POST to: ${url}`); // Log for debugging
      const response = await fetch(url, { method: 'POST' });
      
      if (!response.ok) {
        throw new Error(`Failed to ${isRecording ? 'stop' : 'start'} recording`);
      }
      
      if (isRecording) { 
        const files = await response.json();
        dispatch(setRecordingFiles(files));
      } else {
        dispatch(setRecordingFiles(null));
      }
      dispatch(setRecordingStatus(!isRecording));
    } catch (error) {
      console.error(error);
      dispatch(setError(error.message));
    }
  };

  // ==== KEYBOARD CONTROLS ====
  useEffect(() => {
    const handleKeyDown = (e) => {
      const validKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'w', 'a', 's', 'd', 'q', 'e', 'Escape'];
      if (validKeys.includes(e.key)) {
      {/*  // Stops the browser's default behavior for these keys
        // Prevents things like page scrolling when using arrow keys
        // Ensures keys only control the drone */}
        e.preventDefault();
      {/* A Set only stores unique values
        //  If a key is already pressed, adding it again won't create duplicates
        // Perfect for tracking which keys are currently being held down
        // Used to show visual feedback in the UI (the keys light up when pressed) */}  
        setActiveKeys(prev => {
        {/* Why We Always Need Previous State:
        // Even for a single key, we need the previous state because:
        // Multiple keys can be pressed before others are released
        // Keys can be pressed simultaneously
        // We don't want to lose track of already pressed keys    */}  
          const updated = new Set(prev); 
          updated.add(e.key);
          return updated;
        });

        // Map keys to drone commands
        switch (e.key) {
          case 'w': sendCommand(`forward ${20}`); break;
          case 's': sendCommand(`back ${20}`); break;
          case 'a': sendCommand(`left ${20}`); break;
          case 'd': sendCommand(`right ${20}`); break;
          case 'ArrowUp': sendCommand(`up ${20}`); break;
          case 'ArrowDown': sendCommand(`down ${20}`); break;
          case 'ArrowLeft': sendCommand(`ccw ${45}`); break;
          case 'ArrowRight': sendCommand(`cw ${45}`); break;
          case 'Escape': handleGracefulShutdown(); break;
        }
      }
    };
    // ==== KEY UP ====
    const handleKeyUp = (e) => {
      const validKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'w', 'a', 's', 'd', 'q', 'e', 'Escape'];
      if (validKeys.includes(e.key)) {
        e.preventDefault();
        setActiveKeys(prev => {
          const updated = new Set(prev);
          updated.delete(e.key); // removes the key from the set that was released
          return updated;
        });
      }
    };

    window.addEventListener('keydown', handleKeyDown); // when a key is pressed, handleKeyDown is called
    window.addEventListener('keyup', handleKeyUp); // when a key is released, handleKeyUp is called

    return () => {
      window.removeEventListener('keydown', handleKeyDown);
      window.removeEventListener('keyup', handleKeyUp);
    };
  }, [droneConnected]); // re-runs when droneConnected changes to prevent memory leaks

  // Basic flight controls
  const handleTakeoff = () => sendCommand('takeoff');
  const handleLand = () => sendCommand('land');
  const handleEmergency = () => sendCommand('emergency');

  // Clear error after 5 seconds
  useEffect(() => {
    if (error) {
      const timer = setTimeout(() => {
        dispatch(setError(null));
      }, 5000);
      return () => clearTimeout(timer);
    }
  }, [error, dispatch]);

  // Add graceful shutdown handler
  const handleGracefulShutdown = async () => {
    try {
       // Construct the full URL
       const url = `${API_BASE_URL}/drone/shutdown`;
       console.log(`Sending POST to: ${url}`); // Log for debugging
       const response = await fetch(url, { method: 'POST' });
      
      if (!response.ok) {
        throw new Error('Failed to initiate graceful shutdown');
      }
      
      dispatch(setDroneConnection(false));
      dispatch(setStreamEnabled(false));
      dispatch(setError('Graceful shutdown initiated'));
    } catch (error) {
      console.error(error);
      dispatch(setError(error.message));
    }
  };

  return (
    <>
      {/* Connection status and connect button - centered top */}
      <div className="absolute top-4 left-1/2 -translate-x-1/2 z-30 flex items-center gap-2">
        <div className={`h-2 w-2 rounded-full ${droneConnected ? 'bg-green-500' : 'bg-red-500'} animate-pulse`} />
        {!droneConnected && (
          <button 
            onClick={enterSDKMode}
            className="px-3 py-1.5 bg-white/10 backdrop-blur-sm text-white text-sm font-medium rounded-full 
                     hover:bg-white/20 transition-all duration-200 flex items-center gap-2 group"
          >
            <svg 
              xmlns="http://www.w3.org/2000/svg" 
              className="h-4 w-4 transition-transform group-hover:rotate-180" 
              fill="none" 
              viewBox="0 0 24 24" 
              stroke="currentColor"
            >
              <path 
                strokeLinecap="round" 
                strokeLinejoin="round" 
                strokeWidth={2} 
                d="M13 10V3L4 14h7v7l9-11h-7z"
              />
            </svg>
            Connect Drone
          </button>
        )}

        {/* Video status and control - right side */}
        <div className="ml-8 flex items-center gap-2">
          <div className={`h-2 w-2 rounded-full ${streamEnabled ? 'bg-sky-500' : 'bg-red-500'} animate-pulse`} />
          {droneConnected && (
            <button 
              onClick={toggleVideoStream}
              className="px-3 py-1.5 bg-white/10 backdrop-blur-sm text-white text-sm font-medium rounded-full 
                       hover:bg-white/20 transition-all duration-200 flex items-center gap-2 group"
            >
              <svg 
                xmlns="http://www.w3.org/2000/svg" 
                className="h-4 w-4" 
                fill="none" 
                viewBox="0 0 24 24" 
                stroke="currentColor"
              >
                {streamEnabled ? (
                  <path 
                    strokeLinecap="round" 
                    strokeLinejoin="round" 
                    strokeWidth={2} 
                    d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z M10 9v6m4-6v6" 
                  />
                ) : (
                  <path 
                    strokeLinecap="round" 
                    strokeLinejoin="round" 
                    strokeWidth={2} 
                    d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" 
                  />
                )}
              </svg>
              {streamEnabled ? 'Stop Video' : 'Start Video'}
            </button>
          )}
        </div>
      </div>

      {/* Media Controls - Top Right */}
      <div className="absolute top-4 right-4 z-30 flex items-center gap-3">
        {/* Capture Photo Button */}
        <button 
          onClick={capturePhoto}
          disabled={!streamEnabled}
          className={`group relative px-3 py-1.5 rounded-full flex items-center gap-2 ${
            streamEnabled 
              ? 'bg-emerald-500/20 hover:bg-emerald-500/30 border border-emerald-500/50' 
              : 'bg-gray-500/20 border border-gray-500/30 cursor-not-allowed'
          } backdrop-blur-sm transition-all duration-200`}
        >
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            className={`h-4 w-4 ${streamEnabled ? 'text-emerald-400' : 'text-gray-400'}`}
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
          >
            <path 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              strokeWidth={2} 
              d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z"
            />
            <path 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              strokeWidth={2} 
              d="M15 13a3 3 0 11-6 0 3 3 0 016 0z"
            />
          </svg>
          <span className="text-sm font-medium text-white">Capture</span>
        </button>

        {/* Record Button
        // First check: Controls button functionality
        // If no stream is active (streamEnabled = false), button cannot be clicked */}
        <button 
          onClick={toggleRecording}
          disabled={!streamEnabled}
          className={`group relative px-3 py-1.5 rounded-full flex items-center gap-2 ${
            streamEnabled
              ? isRecording 
                ? 'bg-red-500/20 hover:bg-red-500/30 border border-red-500/50' // Red when recording
                : 'bg-sky-500/20 hover:bg-sky-500/30 border border-sky-500/50' // Blue when ready to record
              : 'bg-gray-500/20 border border-gray-500/30 cursor-not-allowed' // Gray when disabled (no stream)
          } backdrop-blur-sm transition-all duration-200`}
        >
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            className={`h-4 w-4 ${
              streamEnabled 
                ? isRecording ? 'text-red-400' : 'text-sky-400'
                : 'text-gray-400'
            }`}
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
          >
            {isRecording ? (
              <path 
                strokeLinecap="round" 
                strokeLinejoin="round" 
                strokeWidth={2} 
                d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z M10 9v6m4-6v6"
              />
            ) : (
              <path 
                strokeLinecap="round" 
                strokeLinejoin="round" 
                strokeWidth={2} 
                d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"
              />
            )}
          </svg>
          <span className="text-sm font-medium text-white">
            {isRecording ? 'Stop' : 'Record'}
          </span>
        </button>
      </div>

      {/* Takeoff/Land Controls - Top Left */}
      <div className="absolute top-5 left-8 z-30 flex gap-3">
        {/* Takeoff button */}
        <button
          onClick={handleTakeoff}
          disabled={!droneConnected}
          className={`group relative p-2.5 rounded-lg ${
            droneConnected 
              ? 'bg-transparent hover:bg-emerald-500/30 border border-emerald-500/50' 
              : 'bg-transparent border border-gray-500/30 cursor-not-allowed'
          } backdrop-blur-sm transition-all duration-200 hover:scale-105`}
          title="Takeoff"
        >
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            className={`h-5 w-5 ${droneConnected ? 'text-emerald-400' : 'text-gray-400'}`}
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
          >
            <path 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              strokeWidth={2} 
              d="M5 10l7-7m0 0l7 7m-7-7v18" 
            />
          </svg>
          <span className="absolute -bottom-8 left-1/2 -translate-x-1/2 px-2 py-1 bg-black/80 text-white text-xs rounded-md opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap">
            Takeoff (T)
          </span>
        </button>

        {/* Land button */}
        <button
          onClick={handleLand}
          disabled={!droneConnected}
          className={`group relative p-2.5 rounded-lg ${
            droneConnected 
              ? 'bg-transparent hover:bg-sky-500/30 border border-sky-500/50' 
              : 'bg-transparent border border-gray-500/30 cursor-not-allowed'
          } backdrop-blur-sm transition-all duration-200 hover:scale-105`}
          title="Land"
        >
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            className={`h-5 w-5 ${droneConnected ? 'text-sky-400' : 'text-gray-400'}`}
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
          >
            <path 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              strokeWidth={2} 
              d="M19 14l-7 7m0 0l-7-7m7 7V3" 
            />
          </svg>
          <span className="absolute -bottom-8 left-1/2 -translate-x-1/2 px-2 py-1 bg-black/80 text-white text-xs rounded-md opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap">
            Land (L)
          </span>
        </button>

        {/* Emergency button */}
        <button
          onClick={handleEmergency}
          disabled={!droneConnected}
          className={`group relative p-2.5 rounded-lg ${
            droneConnected 
              ? 'bg-transparent hover:bg-red-500/30 border border-red-500/50 animate-pulse' 
              : 'bg-transparent border border-gray-500/30 cursor-not-allowed'
          } backdrop-blur-sm transition-all duration-200 hover:scale-105`}
          title="Emergency Stop"
        >
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            className={`h-5 w-5 ${droneConnected ? 'text-red-400' : 'text-gray-400'}`}
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
          >
            <path 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              strokeWidth={2.5} 
              d="M6 18L18 6M6 6l12 12" 
            />
          </svg>
          <span className="absolute -bottom-8 left-1/2 -translate-x-1/2 px-2 py-1 bg-black/80 text-white text-xs rounded-md opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap">
            Emergency Stop (ESC)
          </span>
        </button>
      </div>

      {/* Add ESC key indicator with conditional rendering */}
      {droneConnected && (
        <div className="absolute top-28 left-8 z-30">
          <div className="flex items-center gap-2 bg-transparent px-3 py-2 rounded-lg
                        transition-all duration-300 ease-in-out opacity-40 hover:opacity-80">
            <kbd className={`px-2 py-1 text-xs font-semibold text-gray-800 bg-white/80 rounded-md shadow-sm 
                          ${activeKeys.has('Escape') ? 'bg-red-100/80' : ''}`}>ESC</kbd>
            <span className="text-white/60 text-sm">to quit</span>
          </div>
        </div>
      )}

      {/* Left corner - WASD Movement Controls */}
      <div className="absolute bottom-8 left-8 z-30">
        <div className="bg-transparent bg-opacity-70 p-6 rounded-lg text-white">
          
          {/* WASD keys */}
          <div className="grid grid-cols-3 gap-2 w-40 mx-auto">
            <div></div>
            <div className={`border-2 ${activeKeys.has('w') ? 'bg-blue-500 border-blue-300' : 'border-gray-600'} rounded-md p-3 text-center font-bold`}>W</div>
            <div></div>
            <div className={`border-2 ${activeKeys.has('a') ? 'bg-blue-500 border-blue-300' : 'border-gray-600'} rounded-md p-3 text-center font-bold`}>A</div>
            <div className={`border-2 ${activeKeys.has('s') ? 'bg-blue-500 border-blue-300' : 'border-gray-600'} rounded-md p-3 text-center font-bold`}>S</div>
            <div className={`border-2 ${activeKeys.has('d') ? 'bg-blue-500 border-blue-300' : 'border-gray-600'} rounded-md p-3 text-center font-bold`}>D</div>
          </div>
          
          <div className="mt-4 text-center text-sm text-gray-400">
            <p>Forward / Backward</p>
            <p>Left / Right</p>
          </div>
        </div>
      </div>
      
      {/* Right corner - Arrow keys for Altitude & Rotation */}
      <div className="absolute bottom-8 right-8 z-30">
        <div className="bg-transparent bg-opacity-70 p-6 rounded-lg text-white">
          
          {/* Arrow keys */}
          <div className="grid grid-cols-3 gap-2 w-40 mx-auto">
            <div></div>
            <div className={`border-2 ${activeKeys.has('ArrowUp') ? 'bg-blue-500 border-blue-300' : 'border-gray-600'} rounded-md p-3 text-center font-bold`}>↑</div>
            <div></div>
            <div className={`border-2 ${activeKeys.has('ArrowLeft') ? 'bg-blue-500 border-blue-300' : 'border-gray-600'} rounded-md p-3 text-center font-bold`}>←</div>
            <div className={`border-2 ${activeKeys.has('ArrowDown') ? 'bg-blue-500 border-blue-300' : 'border-gray-600'} rounded-md p-3 text-center font-bold`}>↓</div>
            <div className={`border-2 ${activeKeys.has('ArrowRight') ? 'bg-blue-500 border-blue-300' : 'border-gray-600'} rounded-md p-3 text-center font-bold`}>→</div>
          </div>
          
          <div className="mt-4 text-center text-sm text-gray-400">
            <p>Up / Down</p>
            <p>Rotate Left / Right</p>
          </div>
        </div>
      </div>

      {/* Connection status and media controls */}
      <div className="absolute top-0 right-0 m-4 z-30">
        <div className="space-y-4">
          {/* Error display - bottom center */}
          {error && (
            <div className="fixed bottom-8 left-1/2 -translate-x-1/2 z-50">
              <div className="p-4 bg-red-500/70 text-white rounded-lg shadow-lg backdrop-blur-sm
                            transition-all duration-300 ease-out
                            translate-y-0 opacity-100 scale-100
                            motion-safe:animate-bounce">
                {error}
              </div>
            </div>
          )}
        </div>
      </div>
    </>
  );
};

export default DroneControl;
</file>

<file path="src/components/DroneStateDisplay.jsx">
import React from 'react';
import { useSelector } from 'react-redux';
import { useDroneStateEventSource } from '@hooks/useDroneStateEventSource';

const DroneStateDisplay = () => {
  // Initialize EventSource connection
  useDroneStateEventSource();

  // Get drone state from Redux store
  const droneState = useSelector((state) => state.drone.droneState);

  return (
    <div className="flex items-center justify-center w-full min-h-[200px]">
      <div className="absolute top-5.5 left-50 z-30">
        {/* Battery Status */}
        <div className="bg-transparent backdrop-blur-sm rounded-lg p-2 transition-all duration-200 group">
          <div className="flex items-center gap-0.5">
            <svg 
              xmlns="http://www.w3.org/2000/svg" 
              className="h-5 w-15 text-green-400/90" 
              fill="none" 
              viewBox="0 0 24 24" 
              stroke="currentColor"
            >
              <path 
                strokeLinecap="round" 
                strokeLinejoin="round" 
                strokeWidth={2} 
                d="M3 7h14a2 2 0 012 2v6a2 2 0 01-2 2H3a2 2 0 01-2-2V9a2 2 0 012-2zm14 1h2v6h-2V8z"
              />
            </svg>
            <div className="text-center bg-black/20 rounded-md px-2 py-1 w-full group-hover:bg-black/30 transition-all duration-200">
              <span className={`text-sm font-mono font-semibold ${
                !droneState.battery ? 'text-gray-500' :
                droneState.battery < 20 ? 'text-red-400/90' : 
                droneState.battery < 50 ? 'text-yellow-400/90' : 
                'text-green-400/90'
              }`}>
                {droneState.battery ? `${droneState.battery}%` : ''}
              </span>
            </div>
          </div>
        </div>
      </div>


      {/* Flight Time */}
      <div className="absolute top-20 right-10 z-30">
        <div className="bg-transparent backdrop-blur-sm rounded-lg p-2 bg-purple-500/10 hover:bg-purple-500/10 transition-all duration-200 group">
          <div className="flex items-center gap-1">
            <svg 
              xmlns="http://www.w3.org/2000/svg" 
              className="h-5 w-15 text-purple-400/90" 
              fill="none" 
              viewBox="0 0 24 24" 
              stroke="currentColor"
            >
              <path 
                strokeLinecap="round" 
                strokeLinejoin="round" 
                strokeWidth={2} 
                d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
              />
            </svg>
            <div className="text-center bg-black/20 rounded-md px-2 py-1 w-full group-hover:bg-black/30 transition-all duration-200">
              <span className="text-sm font-mono font-semibold text-purple-400/90">
                {droneState.time ? `${droneState.time}` : ''}
              </span>
            </div>
          </div>
        </div>
      </div>

      {/* Last Update */}
      <div className="absolute top-30 right-10 z-30">
        <div className="bg-transparent backdrop-blur-sm rounded-lg p-2 bg-amber-500/10 hover:bg-amber-500/10 transition-all duration-200 group">
          <div className="flex items-center gap-1">
            <svg 
              xmlns="http://www.w3.org/2000/svg" 
              className="h-5 w-15 text-amber-400/90" 
              fill="none" 
              viewBox="0 0 24 24" 
              stroke="currentColor"
            >
              <path 
                strokeLinecap="round" 
                strokeLinejoin="round" 
                strokeWidth={2} 
                d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
              />
            </svg>
            <div className="text-center bg-black/20 rounded-md px-2 py-1 w-full group-hover:bg-black/30 transition-all duration-200">
              <span className="text-sm font-mono font-semibold text-amber-400/90">
                {droneState.lastUpdate
                  ? new Date(droneState.lastUpdate).toLocaleTimeString()
                  : ''}
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default DroneStateDisplay;
</file>

<file path="src/components/JSMpegVideoPlayer.jsx">
import { useEffect, useRef } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import JSMpeg from '@cycjimmy/jsmpeg-player';
import { setStreamEnabled, setError } from '@/store/slices/droneSlice';
import VideoContainer from '@/components/VideoContainer';

// Get the WebSocket URL from environment variables
const WS_URL = import.meta.env.VITE_WS_URL;

const JSMpegVideoPlayer = () => {
  // Refs to manage video element, player instance, and initialization state
  const videoRef = useRef(null);
  const playerRef = useRef(null);
  const isInitializedRef = useRef(false);
  
  const {
    streamEnabled
  } = useSelector(state => state.drone);
  const dispatch = useDispatch();

  // Cleanup effect: Destroy player and reset state on unmount
  useEffect(() => {
    return () => {
      if (playerRef.current) {
        playerRef.current.destroy();
        playerRef.current = null;
      }
      dispatch(setStreamEnabled(false));
      isInitializedRef.current = false;
    };
  }, []);

  // Handle video stream state changes
  useEffect(() => {
    // Initialize player on first stream enable
    if (!playerRef.current) {
      if (streamEnabled && !isInitializedRef.current) {
        initializePlayer();
      }
      return;
    }
    
    // Use player's built-in methods for subsequent play/pause
    if (streamEnabled) {
      playerRef.current.play();
    } else {
      playerRef.current.pause();
    }
  }, [streamEnabled]);

  // Initialize JSMpeg video player with WebSocket stream
  const initializePlayer = () => {
    if (playerRef.current || !streamEnabled) return;
    
    try {
      console.log(`Connecting JSMpeg to WebSocket at: ${WS_URL}`); // Log for debugging
      // Create new JSMpeg player instance with configuration
      const player = new JSMpeg.VideoElement(videoRef.current, WS_URL, {
        videoWidth: 640,
        videoHeight: 480,
        videoBufferSize: 512 * 1024,
        streaming: true,
        decodeFirstFrame: true,
        chunkSize: 4096,
        disableGl: false,
        progressive: true,
        throttled: false,
        
        // Event hooks for player state management
        hooks: {
          play: () => {
            console.log('Video playback started');
            dispatch(setStreamEnabled(true));
          },
          pause: () => dispatch(setStreamEnabled(false)),
          stop: () => dispatch(setStreamEnabled(false)),
          error: (error) => {
            console.error('JSMpeg error:', error);
            dispatch(setError('Failed to connect to video stream: ' + error.message));
          }
        }
      });
      
      // Store player reference and mark as initialized
      playerRef.current = player.player;
      isInitializedRef.current = true;

      // Add WebSocket error handler
      if (playerRef.current?.source?.socket) {
        playerRef.current.source.socket.addEventListener('error', (error) => {
          console.error('WebSocket error:', error);
          dispatch(setError('WebSocket connection error: ' + error.message));
        });
      }

    } catch (err) {
      console.error('Failed to initialize video:', err);
      dispatch(setError('Failed to initialize video: ' + err.message));
    }
  };

  return <VideoContainer ref={videoRef} />;
};

export default JSMpegVideoPlayer;
</file>

<file path="src/components/VideoContainer.jsx">
import { forwardRef } from 'react';

{/* VideoContainer is a simple presentational component that creates a full-screen black container
It uses forwardRef to pass a ref down to its inner div
It's purely responsible for layout and styling
Acts as a wrapper/container where video content can be rendered */}
const VideoContainer = forwardRef((_, ref) => {
  return (
    <div className="fixed inset-0 w-screen h-screen bg-black">
      <div 
        ref={ref}
        className="w-full h-full object-contain"
      ></div>
    </div>
  );
});

VideoContainer.displayName = 'VideoContainer';

export default VideoContainer;
</file>

<file path="src/hooks/useDroneStateEventSource.js">
import { useEffect } from 'react';
import { useDispatch } from 'react-redux';
import { setDroneState } from '@/store/slices/droneSlice';

// Get the SSE URL from environment variables
const SSE_URL = import.meta.env.VITE_SSE_URL;

export function useDroneStateEventSource() {
    const dispatch = useDispatch();
    console.log(`Connecting to SSE at: ${SSE_URL}`); // Log for debugging

    useEffect(() => {
        // Create EventSource connection
        const eventSource = new EventSource(SSE_URL);

        // Handle incoming messages
        eventSource.onmessage = (event) => {
            try {
                const state = JSON.parse(event.data);
                dispatch(setDroneState(state));
            } catch (error) {
                console.error('Error processing drone state:', error);
            }
        };

        // Handle connection errors
        eventSource.onerror = (error) => {
            // Log the error but don't close the connection
            // EventSource will automatically attempt to reconnect
            console.error(`EventSource error connecting to ${SSE_URL}:`, error);
            
            // Log the connection state
            console.log('EventSource readyState:', 
                eventSource.readyState === 0 ? 'CONNECTING' :
                eventSource.readyState === 1 ? 'OPEN' :
                eventSource.readyState === 2 ? 'CLOSED' : 'UNKNOWN'
            );
        };

        // Cleanup on unmount
        return () => {
            eventSource.close();
        };
    }, []); // Empty dependency array since we only want to create the connection once
}
</file>

<file path="src/index.css">
@import "tailwindcss";
</file>

<file path="src/jsmpeg-player.d.ts">
// primarily for IntelliSense since the package does not have types
declare module '@cycjimmy/jsmpeg-player' {
    export default class VideoElement {
        constructor(wrapper: HTMLElement, url: string, options?: any);
        player: any;
    }
}
</file>

<file path="src/main.jsx">
import React from 'react'
import ReactDOM from 'react-dom/client'
import { Provider } from 'react-redux'
import store from '@/store/store'
import App from '@/App'
import '@/index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <Provider store={store}>
      <App />
    </Provider>
  </React.StrictMode>
)
</file>

<file path="src/store/slices/droneSlice.js">
import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  droneConnected: false,
  streamEnabled: false,
  isRecording: false,
  recordingFiles: null,
  error: null,
  retryAttempts: 0,
  droneState: {
    battery: null,
    speed: null,
    time: null,
    lastUpdate: null
  }
};

export const droneSlice = createSlice({
  name: 'drone',
  initialState,
  reducers: {
    setDroneConnection: (state, action) => {
      state.droneConnected = action.payload;
      if (!action.payload) { // if drone is disconnected, reset retry attempts
        state.retryAttempts = 0;
      }
    },
    setStreamEnabled: (state, action) => {
      state.streamEnabled = action.payload;
    },
    setRecordingStatus: (state, action) => {
      state.isRecording = action.payload;
    },
    setRecordingFiles: (state, action) => {
      state.recordingFiles = action.payload;
    },
    setError: (state, action) => {
      state.error = action.payload;
    },
    incrementRetryAttempts: (state) => {
      state.retryAttempts += 1;
    },
    resetRetryAttempts: (state) => {
      state.retryAttempts = 0;
    },
    setDroneState: (state, action) => {
      state.droneState = action.payload;
    }
  }
});

export const {
  setDroneConnection,
  setStreamEnabled,
  setRecordingStatus,
  setRecordingFiles,
  setError,
  incrementRetryAttempts,
  resetRetryAttempts,
  setDroneState
} = droneSlice.actions;

export default droneSlice.reducer;
</file>

<file path="src/store/store.js">
import { configureStore } from '@reduxjs/toolkit';
import droneReducer from './slices/droneSlice';

export const store = configureStore({
  reducer: {
    drone: droneReducer
  }
});

export default store;
</file>

<file path="vite.config.js">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'
import tailwindcss from '@tailwindcss/vite'

// https://vite.dev/config/
export default defineConfig({
  plugins: [
    react(),
    tailwindcss()
  ],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
      '@components': path.resolve(__dirname, './src/components'),
      '@assets': path.resolve(__dirname, './src/assets'),
      '@styles': path.resolve(__dirname, './src/styles'),
      '@utils': path.resolve(__dirname, './src/utils'),
      '@hooks': path.resolve(__dirname, './src/hooks'),
      '@services': path.resolve(__dirname, './src/services'),
      '@contexts': path.resolve(__dirname, './src/contexts'),
      '@constants': path.resolve(__dirname, './src/constants'),
      '@types': path.resolve(__dirname, './src/types'),
    }
  }
})
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/png" href="/Drone.png">
    <title>Live</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
</file>

</files>
